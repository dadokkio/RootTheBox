version: "3"
services:

  memcached:
    hostname: memcached
    restart: always
    image: memcached:latest
    ports:
      - "11211:11211"

  graphql:
    profiles: [ "graphql" ]
    build:
      context: graph
      dockerfile: Dockerfile
    hostname: graphql
    restart: always
    ports:
      - "7007:7007"
    env_file:
      - rtb.env
    volumes:
      - ./files/avatars:/avatars:rw
    depends_on:
      - webapp

  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    hostname: webapp
    ports:
      - "8888:8888"
    volumes:
      - ./files:/opt/rtb/files:rw
    env_file:
      - rtb.env
    restart: always
    depends_on:
      memcached:
        condition: service_started
      postgres:
        condition: service_healthy
      webapp_start:
        condition: service_completed_successfully

  webapp_start:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: [ "python3", "/opt/rtb/rootthebox.py", "--setup=docker" ]
    volumes:
      - ./files:/opt/rtb/files:rw
    env_file:
      - rtb.env
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:14.1-alpine
    hostname: postgres
    restart: always
    env_file:
      - rtb.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    hostname: pgadmin
    env_file:
      - rtb.env
    ports:
      - 15432:80
    volumes:
      - pgadmin:/var/lib/pgadmin
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  db:
    driver: local
  pgadmin:
    driver: local
